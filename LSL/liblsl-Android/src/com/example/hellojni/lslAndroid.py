# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lslAndroid', [dirname(__file__)])
        except ImportError:
            import _lslAndroid
            return _lslAndroid
        if fp is not None:
            try:
                _mod = imp.load_module('_lslAndroid', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lslAndroid = swig_import_helper()
    del swig_import_helper
else:
    import _lslAndroid
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _lslAndroid.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _lslAndroid.SwigPyIterator_value(self)
    def incr(self, n=1): return _lslAndroid.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _lslAndroid.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _lslAndroid.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _lslAndroid.SwigPyIterator_equal(self, *args)
    def copy(self): return _lslAndroid.SwigPyIterator_copy(self)
    def next(self): return _lslAndroid.SwigPyIterator_next(self)
    def __next__(self): return _lslAndroid.SwigPyIterator___next__(self)
    def previous(self): return _lslAndroid.SwigPyIterator_previous(self)
    def advance(self, *args): return _lslAndroid.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _lslAndroid.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _lslAndroid.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _lslAndroid.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _lslAndroid.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _lslAndroid.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _lslAndroid.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _lslAndroid.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

cf_float32 = _lslAndroid.cf_float32
cf_double64 = _lslAndroid.cf_double64
cf_string = _lslAndroid.cf_string
cf_int32 = _lslAndroid.cf_int32
cf_int16 = _lslAndroid.cf_int16
cf_int8 = _lslAndroid.cf_int8
cf_int64 = _lslAndroid.cf_int64
cf_undefined = _lslAndroid.cf_undefined

def protocol_version():
  return _lslAndroid.protocol_version()
protocol_version = _lslAndroid.protocol_version

def library_version():
  return _lslAndroid.library_version()
library_version = _lslAndroid.library_version

def local_clock():
  return _lslAndroid.local_clock()
local_clock = _lslAndroid.local_clock
class stream_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stream_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stream_info, name)
    __repr__ = _swig_repr
    def name(self): return _lslAndroid.stream_info_name(self)
    def type(self): return _lslAndroid.stream_info_type(self)
    def channel_count(self): return _lslAndroid.stream_info_channel_count(self)
    def nominal_srate(self): return _lslAndroid.stream_info_nominal_srate(self)
    def channel_format(self): return _lslAndroid.stream_info_channel_format(self)
    def source_id(self): return _lslAndroid.stream_info_source_id(self)
    def version(self): return _lslAndroid.stream_info_version(self)
    def created_at(self): return _lslAndroid.stream_info_created_at(self)
    def uid(self): return _lslAndroid.stream_info_uid(self)
    def session_id(self): return _lslAndroid.stream_info_session_id(self)
    def hostname(self): return _lslAndroid.stream_info_hostname(self)
    def desc(self, *args): return _lslAndroid.stream_info_desc(self, *args)
    def as_xml(self): return _lslAndroid.stream_info_as_xml(self)
    def channel_bytes(self): return _lslAndroid.stream_info_channel_bytes(self)
    def sample_bytes(self): return _lslAndroid.stream_info_sample_bytes(self)
    def impl(self, *args): return _lslAndroid.stream_info_impl(self, *args)
    def __init__(self, *args): 
        this = _lslAndroid.new_stream_info(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lslAndroid.delete_stream_info
    __del__ = lambda self : None;
stream_info_swigregister = _lslAndroid.stream_info_swigregister
stream_info_swigregister(stream_info)
cvar = _lslAndroid.cvar
IRREGULAR_RATE = cvar.IRREGULAR_RATE
DEDUCED_TIMESTAMP = cvar.DEDUCED_TIMESTAMP
FOREVER = cvar.FOREVER

class stream_outlet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stream_outlet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stream_outlet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lslAndroid.new_stream_outlet(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_sample(self, *args): return _lslAndroid.stream_outlet_push_sample(self, *args)
    def push_numeric_raw(self, *args): return _lslAndroid.stream_outlet_push_numeric_raw(self, *args)
    def have_consumers(self): return _lslAndroid.stream_outlet_have_consumers(self)
    def wait_for_consumers(self, *args): return _lslAndroid.stream_outlet_wait_for_consumers(self, *args)
    def info(self): return _lslAndroid.stream_outlet_info(self)
    __swig_destroy__ = _lslAndroid.delete_stream_outlet
    __del__ = lambda self : None;
stream_outlet_swigregister = _lslAndroid.stream_outlet_swigregister
stream_outlet_swigregister(stream_outlet)


def resolve_streams(wait_time=1.0):
  return _lslAndroid.resolve_streams(wait_time)
resolve_streams = _lslAndroid.resolve_streams

def resolve_stream(*args):
  return _lslAndroid.resolve_stream(*args)
resolve_stream = _lslAndroid.resolve_stream
class continuous_resolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, continuous_resolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, continuous_resolver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lslAndroid.new_continuous_resolver(*args)
        try: self.this.append(this)
        except: self.this = this
    def results(self): return _lslAndroid.continuous_resolver_results(self)
    __swig_destroy__ = _lslAndroid.delete_continuous_resolver
    __del__ = lambda self : None;
continuous_resolver_swigregister = _lslAndroid.continuous_resolver_swigregister
continuous_resolver_swigregister(continuous_resolver)

class stream_inlet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stream_inlet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stream_inlet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lslAndroid.new_stream_inlet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lslAndroid.delete_stream_inlet
    __del__ = lambda self : None;
    def info(self, *args): return _lslAndroid.stream_inlet_info(self, *args)
    def open_stream(self, *args): return _lslAndroid.stream_inlet_open_stream(self, *args)
    def close_stream(self): return _lslAndroid.stream_inlet_close_stream(self)
    def time_correction(self, *args): return _lslAndroid.stream_inlet_time_correction(self, *args)
    def pull_sample(self, *args): return _lslAndroid.stream_inlet_pull_sample(self, *args)
    def pull_numeric_raw(self, *args): return _lslAndroid.stream_inlet_pull_numeric_raw(self, *args)
    def samples_available(self): return _lslAndroid.stream_inlet_samples_available(self)
stream_inlet_swigregister = _lslAndroid.stream_inlet_swigregister
stream_inlet_swigregister(stream_inlet)

class xml_element(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xml_element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xml_element, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lslAndroid.new_xml_element(*args)
        try: self.this.append(this)
        except: self.this = this
    def first_child(self): return _lslAndroid.xml_element_first_child(self)
    def last_child(self): return _lslAndroid.xml_element_last_child(self)
    def parent(self): return _lslAndroid.xml_element_parent(self)
    def child(self, *args): return _lslAndroid.xml_element_child(self, *args)
    def next_sibling(self, *args): return _lslAndroid.xml_element_next_sibling(self, *args)
    def previous_sibling(self, *args): return _lslAndroid.xml_element_previous_sibling(self, *args)
    def empty(self): return _lslAndroid.xml_element_empty(self)
    def is_text(self): return _lslAndroid.xml_element_is_text(self)
    def name(self): return _lslAndroid.xml_element_name(self)
    def value(self): return _lslAndroid.xml_element_value(self)
    def child_value(self, *args): return _lslAndroid.xml_element_child_value(self, *args)
    def append_child_value(self, *args): return _lslAndroid.xml_element_append_child_value(self, *args)
    def prepend_child_value(self, *args): return _lslAndroid.xml_element_prepend_child_value(self, *args)
    def set_child_value(self, *args): return _lslAndroid.xml_element_set_child_value(self, *args)
    def set_name(self, *args): return _lslAndroid.xml_element_set_name(self, *args)
    def set_value(self, *args): return _lslAndroid.xml_element_set_value(self, *args)
    def append_child(self, *args): return _lslAndroid.xml_element_append_child(self, *args)
    def prepend_child(self, *args): return _lslAndroid.xml_element_prepend_child(self, *args)
    def append_copy(self, *args): return _lslAndroid.xml_element_append_copy(self, *args)
    def prepend_copy(self, *args): return _lslAndroid.xml_element_prepend_copy(self, *args)
    def remove_child(self, *args): return _lslAndroid.xml_element_remove_child(self, *args)
    def ptr(self): return _lslAndroid.xml_element_ptr(self)
    __swig_destroy__ = _lslAndroid.delete_xml_element
    __del__ = lambda self : None;
xml_element_swigregister = _lslAndroid.xml_element_swigregister
xml_element_swigregister(xml_element)

class lost_error(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lost_error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lost_error, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lslAndroid.new_lost_error(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lslAndroid.delete_lost_error
    __del__ = lambda self : None;
lost_error_swigregister = _lslAndroid.lost_error_swigregister
lost_error_swigregister(lost_error)

class timeout_error(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, timeout_error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, timeout_error, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lslAndroid.new_timeout_error(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lslAndroid.delete_timeout_error
    __del__ = lambda self : None;
timeout_error_swigregister = _lslAndroid.timeout_error_swigregister
timeout_error_swigregister(timeout_error)

class vectorf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorf, name)
    __repr__ = _swig_repr
    def iterator(self): return _lslAndroid.vectorf_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _lslAndroid.vectorf___nonzero__(self)
    def __bool__(self): return _lslAndroid.vectorf___bool__(self)
    def __len__(self): return _lslAndroid.vectorf___len__(self)
    def pop(self): return _lslAndroid.vectorf_pop(self)
    def __getslice__(self, *args): return _lslAndroid.vectorf___getslice__(self, *args)
    def __setslice__(self, *args): return _lslAndroid.vectorf___setslice__(self, *args)
    def __delslice__(self, *args): return _lslAndroid.vectorf___delslice__(self, *args)
    def __delitem__(self, *args): return _lslAndroid.vectorf___delitem__(self, *args)
    def __getitem__(self, *args): return _lslAndroid.vectorf___getitem__(self, *args)
    def __setitem__(self, *args): return _lslAndroid.vectorf___setitem__(self, *args)
    def append(self, *args): return _lslAndroid.vectorf_append(self, *args)
    def empty(self): return _lslAndroid.vectorf_empty(self)
    def size(self): return _lslAndroid.vectorf_size(self)
    def clear(self): return _lslAndroid.vectorf_clear(self)
    def swap(self, *args): return _lslAndroid.vectorf_swap(self, *args)
    def get_allocator(self): return _lslAndroid.vectorf_get_allocator(self)
    def begin(self): return _lslAndroid.vectorf_begin(self)
    def end(self): return _lslAndroid.vectorf_end(self)
    def rbegin(self): return _lslAndroid.vectorf_rbegin(self)
    def rend(self): return _lslAndroid.vectorf_rend(self)
    def pop_back(self): return _lslAndroid.vectorf_pop_back(self)
    def erase(self, *args): return _lslAndroid.vectorf_erase(self, *args)
    def __init__(self, *args): 
        this = _lslAndroid.new_vectorf(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _lslAndroid.vectorf_push_back(self, *args)
    def front(self): return _lslAndroid.vectorf_front(self)
    def back(self): return _lslAndroid.vectorf_back(self)
    def assign(self, *args): return _lslAndroid.vectorf_assign(self, *args)
    def resize(self, *args): return _lslAndroid.vectorf_resize(self, *args)
    def insert(self, *args): return _lslAndroid.vectorf_insert(self, *args)
    def reserve(self, *args): return _lslAndroid.vectorf_reserve(self, *args)
    def capacity(self): return _lslAndroid.vectorf_capacity(self)
    __swig_destroy__ = _lslAndroid.delete_vectorf
    __del__ = lambda self : None;
vectorf_swigregister = _lslAndroid.vectorf_swigregister
vectorf_swigregister(vectorf)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _lslAndroid.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _lslAndroid.vectord___nonzero__(self)
    def __bool__(self): return _lslAndroid.vectord___bool__(self)
    def __len__(self): return _lslAndroid.vectord___len__(self)
    def pop(self): return _lslAndroid.vectord_pop(self)
    def __getslice__(self, *args): return _lslAndroid.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _lslAndroid.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _lslAndroid.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _lslAndroid.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _lslAndroid.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _lslAndroid.vectord___setitem__(self, *args)
    def append(self, *args): return _lslAndroid.vectord_append(self, *args)
    def empty(self): return _lslAndroid.vectord_empty(self)
    def size(self): return _lslAndroid.vectord_size(self)
    def clear(self): return _lslAndroid.vectord_clear(self)
    def swap(self, *args): return _lslAndroid.vectord_swap(self, *args)
    def get_allocator(self): return _lslAndroid.vectord_get_allocator(self)
    def begin(self): return _lslAndroid.vectord_begin(self)
    def end(self): return _lslAndroid.vectord_end(self)
    def rbegin(self): return _lslAndroid.vectord_rbegin(self)
    def rend(self): return _lslAndroid.vectord_rend(self)
    def pop_back(self): return _lslAndroid.vectord_pop_back(self)
    def erase(self, *args): return _lslAndroid.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _lslAndroid.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _lslAndroid.vectord_push_back(self, *args)
    def front(self): return _lslAndroid.vectord_front(self)
    def back(self): return _lslAndroid.vectord_back(self)
    def assign(self, *args): return _lslAndroid.vectord_assign(self, *args)
    def resize(self, *args): return _lslAndroid.vectord_resize(self, *args)
    def insert(self, *args): return _lslAndroid.vectord_insert(self, *args)
    def reserve(self, *args): return _lslAndroid.vectord_reserve(self, *args)
    def capacity(self): return _lslAndroid.vectord_capacity(self)
    __swig_destroy__ = _lslAndroid.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _lslAndroid.vectord_swigregister
vectord_swigregister(vectord)

class vectorl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorl, name)
    __repr__ = _swig_repr
    def iterator(self): return _lslAndroid.vectorl_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _lslAndroid.vectorl___nonzero__(self)
    def __bool__(self): return _lslAndroid.vectorl___bool__(self)
    def __len__(self): return _lslAndroid.vectorl___len__(self)
    def pop(self): return _lslAndroid.vectorl_pop(self)
    def __getslice__(self, *args): return _lslAndroid.vectorl___getslice__(self, *args)
    def __setslice__(self, *args): return _lslAndroid.vectorl___setslice__(self, *args)
    def __delslice__(self, *args): return _lslAndroid.vectorl___delslice__(self, *args)
    def __delitem__(self, *args): return _lslAndroid.vectorl___delitem__(self, *args)
    def __getitem__(self, *args): return _lslAndroid.vectorl___getitem__(self, *args)
    def __setitem__(self, *args): return _lslAndroid.vectorl___setitem__(self, *args)
    def append(self, *args): return _lslAndroid.vectorl_append(self, *args)
    def empty(self): return _lslAndroid.vectorl_empty(self)
    def size(self): return _lslAndroid.vectorl_size(self)
    def clear(self): return _lslAndroid.vectorl_clear(self)
    def swap(self, *args): return _lslAndroid.vectorl_swap(self, *args)
    def get_allocator(self): return _lslAndroid.vectorl_get_allocator(self)
    def begin(self): return _lslAndroid.vectorl_begin(self)
    def end(self): return _lslAndroid.vectorl_end(self)
    def rbegin(self): return _lslAndroid.vectorl_rbegin(self)
    def rend(self): return _lslAndroid.vectorl_rend(self)
    def pop_back(self): return _lslAndroid.vectorl_pop_back(self)
    def erase(self, *args): return _lslAndroid.vectorl_erase(self, *args)
    def __init__(self, *args): 
        this = _lslAndroid.new_vectorl(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _lslAndroid.vectorl_push_back(self, *args)
    def front(self): return _lslAndroid.vectorl_front(self)
    def back(self): return _lslAndroid.vectorl_back(self)
    def assign(self, *args): return _lslAndroid.vectorl_assign(self, *args)
    def resize(self, *args): return _lslAndroid.vectorl_resize(self, *args)
    def insert(self, *args): return _lslAndroid.vectorl_insert(self, *args)
    def reserve(self, *args): return _lslAndroid.vectorl_reserve(self, *args)
    def capacity(self): return _lslAndroid.vectorl_capacity(self)
    __swig_destroy__ = _lslAndroid.delete_vectorl
    __del__ = lambda self : None;
vectorl_swigregister = _lslAndroid.vectorl_swigregister
vectorl_swigregister(vectorl)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _lslAndroid.vectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _lslAndroid.vectori___nonzero__(self)
    def __bool__(self): return _lslAndroid.vectori___bool__(self)
    def __len__(self): return _lslAndroid.vectori___len__(self)
    def pop(self): return _lslAndroid.vectori_pop(self)
    def __getslice__(self, *args): return _lslAndroid.vectori___getslice__(self, *args)
    def __setslice__(self, *args): return _lslAndroid.vectori___setslice__(self, *args)
    def __delslice__(self, *args): return _lslAndroid.vectori___delslice__(self, *args)
    def __delitem__(self, *args): return _lslAndroid.vectori___delitem__(self, *args)
    def __getitem__(self, *args): return _lslAndroid.vectori___getitem__(self, *args)
    def __setitem__(self, *args): return _lslAndroid.vectori___setitem__(self, *args)
    def append(self, *args): return _lslAndroid.vectori_append(self, *args)
    def empty(self): return _lslAndroid.vectori_empty(self)
    def size(self): return _lslAndroid.vectori_size(self)
    def clear(self): return _lslAndroid.vectori_clear(self)
    def swap(self, *args): return _lslAndroid.vectori_swap(self, *args)
    def get_allocator(self): return _lslAndroid.vectori_get_allocator(self)
    def begin(self): return _lslAndroid.vectori_begin(self)
    def end(self): return _lslAndroid.vectori_end(self)
    def rbegin(self): return _lslAndroid.vectori_rbegin(self)
    def rend(self): return _lslAndroid.vectori_rend(self)
    def pop_back(self): return _lslAndroid.vectori_pop_back(self)
    def erase(self, *args): return _lslAndroid.vectori_erase(self, *args)
    def __init__(self, *args): 
        this = _lslAndroid.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _lslAndroid.vectori_push_back(self, *args)
    def front(self): return _lslAndroid.vectori_front(self)
    def back(self): return _lslAndroid.vectori_back(self)
    def assign(self, *args): return _lslAndroid.vectori_assign(self, *args)
    def resize(self, *args): return _lslAndroid.vectori_resize(self, *args)
    def insert(self, *args): return _lslAndroid.vectori_insert(self, *args)
    def reserve(self, *args): return _lslAndroid.vectori_reserve(self, *args)
    def capacity(self): return _lslAndroid.vectori_capacity(self)
    __swig_destroy__ = _lslAndroid.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _lslAndroid.vectori_swigregister
vectori_swigregister(vectori)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr
    def iterator(self): return _lslAndroid.vectors_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _lslAndroid.vectors___nonzero__(self)
    def __bool__(self): return _lslAndroid.vectors___bool__(self)
    def __len__(self): return _lslAndroid.vectors___len__(self)
    def pop(self): return _lslAndroid.vectors_pop(self)
    def __getslice__(self, *args): return _lslAndroid.vectors___getslice__(self, *args)
    def __setslice__(self, *args): return _lslAndroid.vectors___setslice__(self, *args)
    def __delslice__(self, *args): return _lslAndroid.vectors___delslice__(self, *args)
    def __delitem__(self, *args): return _lslAndroid.vectors___delitem__(self, *args)
    def __getitem__(self, *args): return _lslAndroid.vectors___getitem__(self, *args)
    def __setitem__(self, *args): return _lslAndroid.vectors___setitem__(self, *args)
    def append(self, *args): return _lslAndroid.vectors_append(self, *args)
    def empty(self): return _lslAndroid.vectors_empty(self)
    def size(self): return _lslAndroid.vectors_size(self)
    def clear(self): return _lslAndroid.vectors_clear(self)
    def swap(self, *args): return _lslAndroid.vectors_swap(self, *args)
    def get_allocator(self): return _lslAndroid.vectors_get_allocator(self)
    def begin(self): return _lslAndroid.vectors_begin(self)
    def end(self): return _lslAndroid.vectors_end(self)
    def rbegin(self): return _lslAndroid.vectors_rbegin(self)
    def rend(self): return _lslAndroid.vectors_rend(self)
    def pop_back(self): return _lslAndroid.vectors_pop_back(self)
    def erase(self, *args): return _lslAndroid.vectors_erase(self, *args)
    def __init__(self, *args): 
        this = _lslAndroid.new_vectors(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _lslAndroid.vectors_push_back(self, *args)
    def front(self): return _lslAndroid.vectors_front(self)
    def back(self): return _lslAndroid.vectors_back(self)
    def assign(self, *args): return _lslAndroid.vectors_assign(self, *args)
    def resize(self, *args): return _lslAndroid.vectors_resize(self, *args)
    def insert(self, *args): return _lslAndroid.vectors_insert(self, *args)
    def reserve(self, *args): return _lslAndroid.vectors_reserve(self, *args)
    def capacity(self): return _lslAndroid.vectors_capacity(self)
    __swig_destroy__ = _lslAndroid.delete_vectors
    __del__ = lambda self : None;
vectors_swigregister = _lslAndroid.vectors_swigregister
vectors_swigregister(vectors)

class vectorstr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorstr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorstr, name)
    __repr__ = _swig_repr
    def iterator(self): return _lslAndroid.vectorstr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _lslAndroid.vectorstr___nonzero__(self)
    def __bool__(self): return _lslAndroid.vectorstr___bool__(self)
    def __len__(self): return _lslAndroid.vectorstr___len__(self)
    def pop(self): return _lslAndroid.vectorstr_pop(self)
    def __getslice__(self, *args): return _lslAndroid.vectorstr___getslice__(self, *args)
    def __setslice__(self, *args): return _lslAndroid.vectorstr___setslice__(self, *args)
    def __delslice__(self, *args): return _lslAndroid.vectorstr___delslice__(self, *args)
    def __delitem__(self, *args): return _lslAndroid.vectorstr___delitem__(self, *args)
    def __getitem__(self, *args): return _lslAndroid.vectorstr___getitem__(self, *args)
    def __setitem__(self, *args): return _lslAndroid.vectorstr___setitem__(self, *args)
    def append(self, *args): return _lslAndroid.vectorstr_append(self, *args)
    def empty(self): return _lslAndroid.vectorstr_empty(self)
    def size(self): return _lslAndroid.vectorstr_size(self)
    def clear(self): return _lslAndroid.vectorstr_clear(self)
    def swap(self, *args): return _lslAndroid.vectorstr_swap(self, *args)
    def get_allocator(self): return _lslAndroid.vectorstr_get_allocator(self)
    def begin(self): return _lslAndroid.vectorstr_begin(self)
    def end(self): return _lslAndroid.vectorstr_end(self)
    def rbegin(self): return _lslAndroid.vectorstr_rbegin(self)
    def rend(self): return _lslAndroid.vectorstr_rend(self)
    def pop_back(self): return _lslAndroid.vectorstr_pop_back(self)
    def erase(self, *args): return _lslAndroid.vectorstr_erase(self, *args)
    def __init__(self, *args): 
        this = _lslAndroid.new_vectorstr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _lslAndroid.vectorstr_push_back(self, *args)
    def front(self): return _lslAndroid.vectorstr_front(self)
    def back(self): return _lslAndroid.vectorstr_back(self)
    def assign(self, *args): return _lslAndroid.vectorstr_assign(self, *args)
    def resize(self, *args): return _lslAndroid.vectorstr_resize(self, *args)
    def insert(self, *args): return _lslAndroid.vectorstr_insert(self, *args)
    def reserve(self, *args): return _lslAndroid.vectorstr_reserve(self, *args)
    def capacity(self): return _lslAndroid.vectorstr_capacity(self)
    __swig_destroy__ = _lslAndroid.delete_vectorstr
    __del__ = lambda self : None;
vectorstr_swigregister = _lslAndroid.vectorstr_swigregister
vectorstr_swigregister(vectorstr)

class vectorinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorinfo, name)
    __repr__ = _swig_repr
    def iterator(self): return _lslAndroid.vectorinfo_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _lslAndroid.vectorinfo___nonzero__(self)
    def __bool__(self): return _lslAndroid.vectorinfo___bool__(self)
    def __len__(self): return _lslAndroid.vectorinfo___len__(self)
    def pop(self): return _lslAndroid.vectorinfo_pop(self)
    def __getslice__(self, *args): return _lslAndroid.vectorinfo___getslice__(self, *args)
    def __setslice__(self, *args): return _lslAndroid.vectorinfo___setslice__(self, *args)
    def __delslice__(self, *args): return _lslAndroid.vectorinfo___delslice__(self, *args)
    def __delitem__(self, *args): return _lslAndroid.vectorinfo___delitem__(self, *args)
    def __getitem__(self, *args): return _lslAndroid.vectorinfo___getitem__(self, *args)
    def __setitem__(self, *args): return _lslAndroid.vectorinfo___setitem__(self, *args)
    def append(self, *args): return _lslAndroid.vectorinfo_append(self, *args)
    def empty(self): return _lslAndroid.vectorinfo_empty(self)
    def size(self): return _lslAndroid.vectorinfo_size(self)
    def clear(self): return _lslAndroid.vectorinfo_clear(self)
    def swap(self, *args): return _lslAndroid.vectorinfo_swap(self, *args)
    def get_allocator(self): return _lslAndroid.vectorinfo_get_allocator(self)
    def begin(self): return _lslAndroid.vectorinfo_begin(self)
    def end(self): return _lslAndroid.vectorinfo_end(self)
    def rbegin(self): return _lslAndroid.vectorinfo_rbegin(self)
    def rend(self): return _lslAndroid.vectorinfo_rend(self)
    def pop_back(self): return _lslAndroid.vectorinfo_pop_back(self)
    def erase(self, *args): return _lslAndroid.vectorinfo_erase(self, *args)
    def __init__(self, *args): 
        this = _lslAndroid.new_vectorinfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _lslAndroid.vectorinfo_push_back(self, *args)
    def front(self): return _lslAndroid.vectorinfo_front(self)
    def back(self): return _lslAndroid.vectorinfo_back(self)
    def assign(self, *args): return _lslAndroid.vectorinfo_assign(self, *args)
    def resize(self, *args): return _lslAndroid.vectorinfo_resize(self, *args)
    def insert(self, *args): return _lslAndroid.vectorinfo_insert(self, *args)
    def reserve(self, *args): return _lslAndroid.vectorinfo_reserve(self, *args)
    def capacity(self): return _lslAndroid.vectorinfo_capacity(self)
    __swig_destroy__ = _lslAndroid.delete_vectorinfo
    __del__ = lambda self : None;
vectorinfo_swigregister = _lslAndroid.vectorinfo_swigregister
vectorinfo_swigregister(vectorinfo)

# This file is compatible with both classic and new-style classes.


